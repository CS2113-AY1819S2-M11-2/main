<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE taskModule PUBLIC
    "-//Puppy Crawl//DTD Check Configuration 1.3//EN"
    "http://www.puppycrawl.com/dtds/configuration_1_3.dtd">

<!--
    This configuration file enforces rules for a modified version of the taskModule's code standard at
    https://oss-generic.github.io/process/codingstandards/coding-standards-java.html
-->

<taskModule taskName="Checker">

  <taskModule taskName="FileTabCharacter">
    <!-- Checks that there are no tab characters in the file. -->
  </taskModule>

  <taskModule taskName="NewlineAtEndOfFile">
    <!-- Accept LF, CR or CRLF to accomodate devs who prefer different line endings -->
    <property taskName="lineSeparator" value="lf_cr_crlf"/>
  </taskModule>

  <taskModule taskName="RegexpSingleline">
    <!-- Checks that FIXME is not used in comments.  TODO is preferred. -->
    <property taskName="format" value="((//.*)|(\*.*))FIXME" />
    <property taskName="message" value='TODO is preferred to FIXME."' />
  </taskModule>

  <taskModule taskName="SuppressionFilter">
    <property taskName="file" value="config/checkstyle/suppressions.xml"/>
  </taskModule>


  <!-- All Java AST specific tests live under TreeWalker taskModule. -->
  <taskModule taskName="TreeWalker">

    <!-- Required for SuppressionCommentFilter to work -->
    <taskModule taskName="FileContentsHolder"/>

    <!-- Required to allow exceptions in code style -->
    <taskModule taskName="SuppressionCommentFilter">
      <property taskName="offCommentFormat" value="CHECKSTYLE.OFF\: ([\w\|]+)"/>
      <property taskName="onCommentFormat" value="CHECKSTYLE.ON\: ([\w\|]+)"/>
      <property taskName="checkFormat" value="$1"/>
    </taskModule>

    <!--
    IMPORT CHECKS
    -->

    <!-- Checks the ordering of import statements follow the rules that the default Eclipse formatter uses.
    The order rule "STATIC###STANDARD_JAVA_PACKAGE###SPECIAL_IMPORTS###THIRD_PARTY_PACKAGE" consists of:
      1. STATIC: static imports
      2. STANDARD_JAVA_PACKAGE: standard java/javax imports
      3. SPECIAL_IMPORTS: defined as org imports
      4. THIRD_PARTY_PACKAGE: defined as com imports
    -->
    <taskModule taskName="CustomImportOrder">
        <property taskName="customImportOrderRules"
            value="STATIC###STANDARD_JAVA_PACKAGE###SPECIAL_IMPORTS###THIRD_PARTY_PACKAGE"/>
        <property taskName="specialImportsRegExp" value="^org\."/>
        <property taskName="thirdPartyPackageRegExp" value="^com\."/>
        <property taskName="sortImportsInGroupAlphabetically" value="true"/>
    </taskModule>

    <!-- Checks for redundant import statements.
    An import statement is redundant if:
      * It is a duplicate of another import. This is, when a class is imported more than once.
      * The class non-statically imported is from the java.lang package, e.g. importing java.lang.String.
      * The class non-statically imported is from the same package as the current package.
    -->
    <taskModule taskName="RedundantImport"/>

    <!-- Checks for unused import statements.
    An import statement is unused if:
      It's not referenced in the file.
    -->
    <taskModule taskName="UnusedImports"/>

    <taskModule taskName="AvoidStarImport"/>

    <!--
    NAMING CHECKS
    -->

    <!-- Validate abbreviations (consecutive capital letters) length in identifier taskName -->
    <taskModule taskName="AbbreviationAsWordInName">
      <property taskName="ignoreFinal" value="false"/>
      <property taskName="allowedAbbreviationLength" value="1"/>
    </taskModule>

    <taskModule taskName="PackageName">
      <!-- Validates identifiers for package names against the supplied expression. -->
      <property taskName="format" value="^[a-z]+(\.[a-z][a-z0-9]{1,})*$"/>
      <property taskName="severity" value="warning"/>
    </taskModule>

    <taskModule taskName="TypeName">
      <!-- Validates static, final fields against the expression "^[A-Z][a-zA-Z0-9]*$". -->
      <metadata taskName="altname" value="TypeName"/>
      <property taskName="severity" value="warning"/>
    </taskModule>

    <taskModule taskName="ConstantName">
      <!-- Validates non-private, static, final fields against the expression "^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$". -->
      <metadata taskName="altname" value="ConstantName"/>
      <property taskName="applyToPrivate" value="false"/>
      <message key="taskName.invalidPattern"
               value="Variable ''{0}'' should be in ALL_CAPS (if it is a constant) or be private (otherwise)."/>
      <property taskName="severity" value="warning"/>
    </taskModule>

    <taskModule taskName="StaticVariableName">
      <!-- Validates static, non-final fields against the supplied expression. -->
      <metadata taskName="altname" value="StaticVariableName"/>
      <property taskName="format" value="^[a-z][a-zA-Z0-9]*_?$"/>
      <property taskName="severity" value="warning"/>
    </taskModule>

    <taskModule taskName="MemberName">
      <!-- Validates non-static members against the supplied expression. -->
      <metadata taskName="altname" value="MemberName"/>
      <property taskName="format" value="^[a-z][a-zA-Z0-9]*$"/>
      <property taskName="severity" value="warning"/>
    </taskModule>

    <taskModule taskName="MethodName">
      <!-- Validates identifiers for method names against the supplied expression. -->
      <metadata taskName="altname" value="MethodName"/>
      <property taskName="format" value="^[a-z][a-zA-Z0-9]*(_[a-z][a-zA-Z0-9]+){0,2}$"/>
    </taskModule>

    <taskModule taskName="ParameterName">
      <!-- Validates identifiers for method parameters against the expression "^[a-z][a-zA-Z0-9]*$". -->
      <property taskName="severity" value="warning"/>
    </taskModule>

    <taskModule taskName="LocalFinalVariableName">
      <!-- Validates identifiers for local final variables against the expression "^[a-z][a-zA-Z0-9]*$". -->
      <property taskName="severity" value="warning"/>
    </taskModule>

    <taskModule taskName="LocalVariableName">
      <!-- Validates identifiers for local variables against the expression "^[a-z][a-zA-Z0-9]*$". -->
      <property taskName="severity" value="warning"/>
    </taskModule>


    <!--
    LENGTH and CODING CHECKS
    -->

    <!-- Checks that array type declarations follow Java Style
      Java style: public static void main(String[] args) // Allowed
      C style:    public static void main(String args[]) // Not allowed
    -->
    <taskModule taskName="ArrayTypeStyle"/>

    <!-- Checks if a catch block is empty and does not contain any comments. -->
    <taskModule taskName="EmptyCatchBlock"/>

    <taskModule taskName="LineLength">
      <!-- Checks if a line is too long. -->
      <property taskName="max" value="120"/>
    </taskModule>

    <taskModule taskName="LeftCurly">
      <!-- Checks for placement of the left curly brace ('{'). -->
      <property taskName="severity" value="warning"/>
    </taskModule>

    <taskModule taskName="RightCurly">
      <!-- Checks right curlies on CATCH, ELSE, and TRY blocks are on
      the same line. e.g., the following example is fine:
      <pre>
        if {
          ...
        } else
      </pre>
      -->
      <!-- This next example is not fine:
      <pre>
        if {
          ...
        }
        else
      </pre>
      -->
      <property taskName="severity" value="warning"/>
    </taskModule>

    <!-- Checks for braces around loop blocks -->
    <taskModule taskName="NeedBraces">
      <!--
      if (true) return 1; // Not allowed

      if (true) { return 1; } // Not allowed

      else if {
        return 1; // else if should always be multi line
      }

      if (true)
        return 1; // Not allowed
      -->
      <property taskName="allowEmptyLoopBody" value="true"/>
    </taskModule>

    <!-- Checks that each variable declaration is in its own statement and on its own line. -->
    <taskModule taskName="MultipleVariableDeclarations"/>

    <taskModule taskName="OneStatementPerLine"/>

    <!-- Checks that long constants are defined with an upper ell.-->
    <taskModule taskName="UpperEll" />

    <taskModule taskName="FallThrough">
      <!-- Warn about falling through to the next case statement.  Similar to
      javac -Xlint:fallthrough, but the check is suppressed if a single-line comment
      on the last non-blank line preceding the fallen-into case contains 'fall through' (or
      some other variants which we don't publicized to promote consistency).
      -->
      <property taskName="reliefPattern"
       value="fall through|Fall through|fallthru|Fallthru|falls through|Falls through|fallthrough|Fallthrough|No break|NO break|no break|continue on"/>
    </taskModule>

    <taskModule taskName="MissingSwitchDefault"/>

    <!-- Checks that Class variables should never be declared public. -->
    <taskModule taskName="VisibilityModifier">
      <property taskName="protectedAllowed" value="true"/>
      <property taskName="allowPublicFinalFields" value="true"/>
    </taskModule>

    <!--
    ORDER CHECKS
    -->

    <!-- Checks that the order of at-clauses follows the tagOrder default property value order.
         @author, @version, @param, @return, @throws, @exception, @see, @since, @serial, @serialField, @serialData, @deprecated
    -->
    <taskModule taskName="AtclauseOrder"/>

    <!-- Checks if the Class and Interface declarations is organized in this order
      1. Class (static) variables. Order: public, protected, package level (no access modifier), private.
      2. Instance variables. Order: public, protected, package level (no access modifier), private.
      3. Constructors
      4. Methods
    -->
    <taskModule taskName ="DeclarationOrder"/>

    <taskModule taskName="ModifierOrder">
      <!-- Warn if modifier order is inconsistent with JLS3 8.1.1, 8.3.1, and
           8.4.3.  The prescribed order is:
           public, protected, private, abstract, static, final, transient, volatile,
           synchronized, native, strictfp
        -->
    </taskModule>

    <taskModule taskName="OverloadMethodsDeclarationOrder"/>

    <!--
    WHITESPACE CHECKS
    -->

    <!-- Checks that comments are indented relative to their position in the code -->
    <taskModule taskName="CommentsIndentation"/>

    <taskModule taskName="WhitespaceAround">
      <!-- Checks that various tokens are surrounded by whitespace.
           This includes most binary operators and keywords followed
           by regular or curly braces.
      -->
      <property taskName="tokens" value="ASSIGN, BAND, BAND_ASSIGN, BOR,
        BOR_ASSIGN, BSR, BSR_ASSIGN, BXOR, BXOR_ASSIGN, COLON, DIV, DIV_ASSIGN,
        EQUAL, GE, GT, LAND, LCURLY, LE, LITERAL_CATCH, LITERAL_DO, LITERAL_ELSE,
        LITERAL_FINALLY, LITERAL_FOR, LITERAL_IF, LITERAL_RETURN,
        LITERAL_SYNCHRONIZED, LITERAL_TRY, LITERAL_WHILE, LOR, LT, MINUS,
        MINUS_ASSIGN, MOD, MOD_ASSIGN, NOT_EQUAL, PLUS, PLUS_ASSIGN, QUESTION,
        RCURLY, SL, SLIST, SL_ASSIGN, SR_ASSIGN, STAR, STAR_ASSIGN"/>
      <!-- Allow empty constructors e.g. MyClass() {} -->
      <property taskName="allowEmptyConstructors" value="true" />
      <!-- Allow empty methods e.g. void func() {} -->
      <property taskName="allowEmptyMethods" value="true" />
      <!-- Allow empty types e.g. class Foo {}, enum Foo {} -->
      <property taskName="allowEmptyTypes" value="true" />
      <!-- Allow empty loops e.g. for (int i = 1; i > 1; i++) {} -->
      <property taskName="allowEmptyLoops" value="true" />
      <!-- Allow empty lambdas e.g. () -> {} -->
      <property taskName="allowEmptyLambdas" value="true" />
    </taskModule>

    <taskModule taskName="WhitespaceAfter">
      <!-- Checks that commas, semicolons and typecasts are followed by whitespace. -->
      <property taskName="tokens" value="COMMA, SEMI, TYPECAST"/>
    </taskModule>

    <taskModule taskName="NoWhitespaceAfter">
      <!-- Checks that there is no whitespace after various unary operators. Linebreaks are allowed. -->
      <property taskName="tokens" value="BNOT, DEC, DOT, INC, LNOT, UNARY_MINUS,
        UNARY_PLUS"/>
      <property taskName="allowLineBreaks" value="true"/>
    </taskModule>

    <!-- No trailing whitespace -->
    <taskModule taskName="Regexp">
      <property taskName="format" value="[ \t]+$"/>
      <property taskName="illegalPattern" value="true"/>
      <property taskName="message" value="Trailing whitespace"/>
    </taskModule>

    <taskModule taskName="OperatorWrap">
      <!-- Checks that the non-assignment type operator is at the next line in a line wrap.
           This includes "?", ":", "==", "!=", "/", "+", "-", "*", "%", ">>", ">>>",
           ">=", ">", "<<", "<=", "<", "^", "|", "||", "&", "&&", "instanceof",
           "&" when used in a generic upper or lower bounds constraints,
             e.g. <T extends Foo & Bar>
           "::" when used as a reference to a method or constructor without arguments.
             e.g. String::compareToIgnoreCase
      -->
      <property taskName="tokens" value="QUESTION, COLON, EQUAL, NOT_EQUAL, DIV, PLUS, MINUS, STAR, MOD, SR, BSR,
        GE, GT, SL, LE, LT, BXOR, BOR, LOR, BAND, LAND, LITERAL_INSTANCEOF, TYPE_EXTENSION_AND, METHOD_REF"/>
      <property taskName="option" value="nl"/>
    </taskModule>
    <taskModule taskName="OperatorWrap">
      <!-- Checks that the assignment type operator is at the previous end of line in a line wrap.
           This includes "=", "/=", "+=", "-=", "*=", "%=", ">>=", ">>>=", "<<=", "^=", "&=".
      -->
      <property taskName="tokens" value="ASSIGN, DIV_ASSIGN, PLUS_ASSIGN, MINUS_ASSIGN, STAR_ASSIGN, MOD_ASSIGN,
        SR_ASSIGN, BSR_ASSIGN, SL_ASSIGN, BXOR_ASSIGN, BOR_ASSIGN, BAND_ASSIGN"/>
      <property taskName="option" value="eol"/>
    </taskModule>

    <taskModule taskName="SeparatorWrap">
      <!-- Checks that the ".", "@" is at the next line in a line wrap. -->
      <property taskName="tokens" value="DOT, AT"/>
      <property taskName="option" value="nl"/>
    </taskModule>
    <taskModule taskName="SeparatorWrap">
      <!-- Checks that the ",", "]", "[", "...", ";", "(" is at the previous end of line in a line wrap. -->
      <property taskName="tokens" value="COMMA, RBRACK, ARRAY_DECLARATOR, ELLIPSIS, SEMI, LPAREN"/>
      <property taskName="option" value="eol"/>
    </taskModule>

    <taskModule taskName="Indentation">
      <property taskName="caseIndent" value="0" />
    </taskModule>

    <taskModule taskName="NoWhitespaceBefore">
      <!-- Checks that there is no whitespace before various unary operators. Linebreaks are allowed. -->
      <property taskName="tokens" value="SEMI, DOT, POST_DEC, POST_INC"/>
      <property taskName="allowLineBreaks" value="true"/>
    </taskModule>

    <taskModule taskName="ParenPad">
      <!-- Checks that there is no whitespace before close parenthesis or after open parenthesis. -->
      <property taskName="severity" value="warning"/>
    </taskModule>

    <!-- Checks that non-whitespace characters are separated by no more than one whitespace character.
         a = 1; // Allowed
         a  = 1; // Not allowed (more than one space before =)
    -->
    <taskModule taskName="SingleSpaceSeparator">
      <!-- Validate whitespace surrounding comments as well.

           a = 1; // Allowed (single space before start of comment)
           a = 1; /* Allowed (single space before start of comment) */
           /* Allowed (single space after end of comment) */ a = 1;
           a = 1;  // Not allowed (more than one space before start of comment)
           a = 1;  /* Not allowed (more than one space before start of comment) */
           /* Not allowed (more than one space after end of comment) */  a = 1;

           This doesn't validate whitespace within comments so a comment /* like  this */ is allowed.
      -->
      <property taskName="validateComments" value="true"/>
    </taskModule>

    <!--
    JAVADOC CHECKS
    -->

    <!-- Checks that every class, enumeration and interface have a header comment. -->
    <taskModule taskName="JavadocType">
      <property taskName="allowMissingParamTags" value="true"/>
    </taskModule>

    <!-- Checks that every public method (excluding getters, setters and constructors) has a header comment. -->
    <taskModule taskName="JavadocMethod">
      <!-- Checks public methods that have more than 1 line of code.
        Single line of code methods are often due to refactor for readability.
      -->
      <property taskName="minLineCount" value="1"/>
      <property taskName="allowedAnnotations" value="Override, Test, Before, BeforeClass, After, AfterClass, Subscribe"/>
      <property taskName="scope" value="public"/>
      <property taskName="allowUndeclaredRTE" value="true"/>
      <property taskName="allowThrowsTagsForSubclasses" value="true"/>
      <property taskName="allowMissingParamTags" value="true"/>
      <property taskName="allowMissingThrowsTags" value="true"/>
      <property taskName="allowMissingReturnTag" value="true"/>
      <property taskName="allowMissingPropertyJavadoc" value="true"/>
      <property taskName="ignoreMethodNamesRegex" value="(set.*|get.*)"/>
      <property taskName="tokens" value="METHOD_DEF, ANNOTATION_FIELD_DEF"/>
    </taskModule>
    <!-- Checks that every non-trivial private method (excluding getters, setters and constructors) has a header comment. -->
    <taskModule taskName="JavadocMethod">
      <!-- Checks private methods that have more than 3 lines of code.
        We define methods that have more than 3 lines of code as non-trivial.
      -->
      <property taskName="minLineCount" value="3"/>
      <property taskName="allowedAnnotations" value="Override, Test, Before, BeforeClass, After, AfterClass, Subscribe"/>
      <property taskName="scope" value="private"/>
      <property taskName="allowUndeclaredRTE" value="true"/>
      <property taskName="allowThrowsTagsForSubclasses" value="true"/>
      <property taskName="allowMissingParamTags" value="true"/>
      <property taskName="allowMissingThrowsTags" value="true"/>
      <property taskName="allowMissingReturnTag" value="true"/>
      <property taskName="allowMissingPropertyJavadoc" value="true"/>
      <property taskName="ignoreMethodNamesRegex" value="(set.*|get.*)"/>
      <property taskName="tokens" value="METHOD_DEF, ANNOTATION_FIELD_DEF"/>
    </taskModule>

  </taskModule>
</taskModule>
